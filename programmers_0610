#중복 제거하기
SELECT count(distinct(name))
from ANIMAL_INS ;

#저자 별 카테고리 별 매출액 집계하기

SELECT B.AUTHOR_ID, A.AUTHOR_NAME, B.CATEGORY, SUM(B.PRICE*BS.SALES) as TOTAL_SALES
FROM BOOK B
LEFT JOIN BOOK_SALES BS ON BS.BOOK_ID = B.BOOK_ID
LEFT JOIN AUTHOR A ON A.AUTHOR_ID = B.AUTHOR_ID
WHERE date_format(BS.sales_Date,"%Y-%m") = "2022-01"
GROUP BY B.CATEGORY,B.AUTHOR_ID
ORDER BY B.AUTHOR_ID ASC,B.CATEGORY DESC;


DATE_FORMAT(데이터,"%Y-%m")="2022-09"

#고양이와 개는 몇 마리 있을까
SELECT ANIMAL_TYPE,COUNT(ANIMAL_TYPE) AS COUNT FROM ANIMAL_INS
GROUP BY ANIMAL_TYPE
ORDER BY ANIMAL_TYPE ASC;

#동명 동물 수 찾기
SELECT AI.NAME,COUNT(AI.NAME) AS CNT
FROM ANIMAL_INS AI
WHERE AI.NAME IS NOT NULL
GROUP BY AI.NAME
HAVING COUNT(AI.NAME)>1
ORDER BY AI.NAME ASC;

HAVING = GROUP BY 와 함께 사용되며, 집계함수를 가지고 조건 비교를 할때 사용된다. 

#년, 월, 성별 별 상품 구매 회원 수 구하기

SELECT YEAR(ONS.SALES_DATE) AS U_YEAR, MONTH(ONS.SALES_DATE) AS U_MONTH, U.GENDER, COUNT(DISTINCT(U.USER_ID)) AS USERS
FROM ONLINE_SALE ONS
LEFT JOIN USER_INFO U ON U.USER_ID = ONS.USER_ID
WHERE GENDER IS NOT NULL
GROUP BY U_YEAR,U_MONTH,GENDER
ORDER BY U_YEAR,U_MONTH,GENDER ASC;

#성분으로 구분한 아이스크림 총 주문량
SELECT II.INGREDIENT_TYPE, SUM(FH.TOTAL_ORDER) AS TOTAL_ORDER
FROM ICECREAM_INFO II
LEFT JOIN FIRST_HALF FH ON FH.FLAVOR = II.FLAVOR
GROUP BY II.INGREDIENT_TYPE
ORDER BY TOTAL_ORDER ASC

#식품분류별 가장 비싼 식품의 정보 조회하기 잘못된 
SELECT CATEGORY, MAX(PRICE) AS MAX_PRICE ,PRODUCT_NAME
FROM FOOD_PRODUCT
WHERE CATEGORY IN ('과자', '국', '김치', '식용유')
GROUP BY CATEGORY
ORDER BY MAX_PRICE DESC;
-> 이렇게 진행되면 가장 비싼 가격은 고를 수 있지만 PRODUCT_NAME을 선택할 때 RANDOM으로 선택하게 됨

1. 이렇게 생각한 이유
    1. 카테고리로 그룹화 한 뒤 그 그룹화한 것에서 가장 큰 가격을 골라내면 가장 큰 가격을 고를 수 있을 거라고 생각함.

1.  틀린 이유
    1. 가장 큰 가격을 고르는 것에는 문제가 없었지만 PRODUCT_NAME을 고르는 과정에서 문제 발생함
    2. 가장 큰 가격과, PRODUCT_NAME이 일치가 되지 않았던 것

1. 해당 방법을 해결하기 위해 
    1. 일단 SELECT 문에서 선택하고 싶은 것들을 선택
    2. WHERE절에서 가장 큰 가격을 선택해 PRODUCT_NAME과 가장 큰 가격을 동일하게 골라준다.

#식품분류별 가장 비싼 식품의 정보 조회하기
SELECT CATEGORY, PRICE ,PRODUCT_NAME
FROM FOOD_PRODUCT
WHERE CATEGORY IN ('과자', '국', '김치', '식용유') AND
PRICE IN (SELECT MAX(PRICE) FROM FOOD_PRODUCT GROUP BY CATEGORY )
GROUP BY CATEGORY
ORDER BY PRICE DESC;

#자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기
SELECT CAR_TYPE, COUNT(DISTINCT(CAR_ID)) AS CARS
FROM CAR_RENTAL_COMPANY_CAR 
WHERE OPTIONS LIKE ('%통풍시트%') OR  OPTIONS LIKE ('%열선시트%') OR  OPTIONS LIKE ('%가죽시트%')
GROUP BY CAR_TYPE
ORDER BY CAR_TYPE ASC;

#즐겨찾기가 가장 많은 식당 정보 출력하기
SELECT FOOD_TYPE,REST_ID,REST_NAME,FAVORITES
FROM REST_INFO 
WHERE FAVORITES IN(SELECT MAX(FAVORITES) FROM REST_INFO GROUP BY FOOD_TYPE)
GROUP BY FOOD_TYPE
ORDER BY FOOD_TYPE DESC;

#조건에 맞는 사용자와 총 거래금액 조회하기

SELECT  U.USER_ID,U.NICKNAME, SUM(DISTINCT(UG.PRICE)) AS TOTAL_SALES
FROM USED_GOODS_USER U
LEFT JOIN USED_GOODS_BOARD UG ON UG.WRITER_ID = U.USER_ID 
WHERE STATUS ='DONE'
GROUP BY U.USER_ID
HAVING TOTAL_SALES>=700000
ORDER BY TOTAL_SALES ASC;


